### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AdminAuthPayload {
  token: String!
}

type CartElement {
  addedAt: DateTime!
  clientId: Int!
  product: Product
  productId: Int!
  quantity: Int!
  updatedAt: DateTime!
}

input CartUpdateFilter {
  productId: Int!
}

input CartUpdateSet {
  quantity: Int!
}

type Client {
  createdAt: DateTime!
  debt: Int!
  email: String!
  id: Int!
  updatedAt: DateTime!
}

"""Type of the returned object after client authentication"""
type ClientAuthPayload {
  data: Client
  token: String!
}

input ClientOrderByInput {
  email: Sort
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Mutation {
  """Admin only, Add a new product"""
  addProduct(description: String, name: String!, price: Float!, quantity: Int!): Product!

  """Client only, add a product to client's cart"""
  addToCart(productId: Int!, quantity: Int!): CartElement!

  """Client only, buy all the products in the client's cart"""
  buyCart: Receipt

  """Client only, clear the client's cart"""
  clearCart: ReturnMessage

  """Client only, remove a product from the client's cart"""
  removeFromCart(productId: Int!): [CartElement!]

  """Admin only, remove a product"""
  removeProduct(id: Int!): Product!

  """Client only"""
  signIn(email: String!, password: String!): ClientAuthPayload!

  """Admin only"""
  signInAdmin(email: String!, password: String!): AdminAuthPayload!

  """Client only"""
  signup(email: String!, password: String!): ClientAuthPayload!

  """
  Client only, update product in client's cart, by overwriting the reserved quantity
  """
  updateCart(filter: CartUpdateFilter!, set: CartUpdateSet!): CartElement!

  """Admin only, update a product"""
  updateProduct(filter: ProductUpdateFilter!, set: ProductUpdateSet!): Product!
}

type Product {
  createdAt: DateTime
  description: String
  id: Int!
  name: String!
  price: Float!
  quantity: Int!
  updatedAt: DateTime
}

input ProductOrderByInput {
  createdAt: Sort
  name: Sort
  price: Sort
  quantity: Sort
}

input ProductUpdateFilter {
  id: Int!
}

input ProductUpdateSet {
  description: String
  name: String
  price: Float
  quantity: Int
}

"""Type of purchases list element"""
type PurchasesElement {
  addedAt: DateTime
  clientIt: Int
  product: Product
  productId: Int
  quantity: Int
  total: Int!
  updatedAt: DateTime
}

type Query {
  """Admin only, return client's information"""
  client(id: Int!): Client

  """Admin only, return list of clients"""
  clientList(email: String, orderBy: [ClientOrderByInput!], skip: Int = 0, take: Int = 5): [Client!]!

  """Admin only, Return purchases history of a specific client"""
  customerPurchases(clientId: Int!, orderBy: [SalesHisOrderByInput!], skip: Int = 0, take: Int = 5): [SalesHistory!]!

  """Client only, return all the products in the client's cart"""
  myCart: [CartElement!]
  product(id: Int!): Product

  """Return list of all available products"""
  productsList(name: String, orderBy: [ProductOrderByInput!], skip: Int = 0, take: Int = 5): [Product!]!

  """Admin only, Return sales history"""
  salesHistory(orderBy: [SalesHisOrderByInput!], skip: Int = 0, take: Int = 5): [SalesHistory!]!
}

"""Type of receipt containing information about what client bought"""
type Receipt {
  message: String!
  purchases: [PurchasesElement!]!
  total: Float!
  totalDebt: Float!
}

type ReturnMessage {
  message: String!
}

input SalesHisOrderByInput {
  date: Sort
  quantity: Sort
  total: Sort
}

type SalesHistory {
  clientId: Int!
  date: DateTime!
  product: Product
  productId: Int!
  quantity: Int!
  total: Float!
}

enum Sort {
  asc
  desc
}