/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CartUpdateFilter: { // input type
    productId: number; // Int!
  }
  CartUpdateSet: { // input type
    quantity: number; // Int!
  }
  ClientOrderByInput: { // input type
    email?: NexusGenEnums['Sort'] | null; // Sort
  }
  ProductOrderByInput: { // input type
    createdAt?: NexusGenEnums['Sort'] | null; // Sort
    name?: NexusGenEnums['Sort'] | null; // Sort
    price?: NexusGenEnums['Sort'] | null; // Sort
    quantity?: NexusGenEnums['Sort'] | null; // Sort
  }
  ProductUpdateFilter: { // input type
    id: number; // Int!
  }
  ProductUpdateSet: { // input type
    description?: string | null; // String
    name?: string | null; // String
    price?: number | null; // Float
    quantity?: number | null; // Int
  }
  SalesHisOrderByInput: { // input type
    date?: NexusGenEnums['Sort'] | null; // Sort
    quantity?: NexusGenEnums['Sort'] | null; // Sort
    total?: NexusGenEnums['Sort'] | null; // Sort
  }
}

export interface NexusGenEnums {
  Sort: "asc" | "desc"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  AdminAuthPayload: { // root type
    token: string; // String!
  }
  CartElement: { // root type
    addedAt: NexusGenScalars['DateTime']; // DateTime!
    clientId: number; // Int!
    productId: number; // Int!
    quantity: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Client: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    debt: number; // Int!
    email: string; // String!
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  ClientAuthPayload: { // root type
    data?: NexusGenRootTypes['Client'] | null; // Client
    token: string; // String!
  }
  Mutation: {};
  Product: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    id: number; // Int!
    name: string; // String!
    price: number; // Float!
    quantity: number; // Int!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  PurchasesElement: { // root type
    addedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    clientIt?: number | null; // Int
    product?: NexusGenRootTypes['Product'] | null; // Product
    productId?: number | null; // Int
    quantity?: number | null; // Int
    total: number; // Int!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Query: {};
  Receipt: { // root type
    message: string; // String!
    purchases: NexusGenRootTypes['PurchasesElement'][]; // [PurchasesElement!]!
    total: number; // Float!
    totalDebt: number; // Float!
  }
  ReturnMessage: { // root type
    message: string; // String!
  }
  SalesHistory: { // root type
    clientId: number; // Int!
    date: NexusGenScalars['DateTime']; // DateTime!
    productId: number; // Int!
    quantity: number; // Int!
    total: number; // Float!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AdminAuthPayload: { // field return type
    token: string; // String!
  }
  CartElement: { // field return type
    addedAt: NexusGenScalars['DateTime']; // DateTime!
    clientId: number; // Int!
    product: NexusGenRootTypes['Product'] | null; // Product
    productId: number; // Int!
    quantity: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Client: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    debt: number; // Int!
    email: string; // String!
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  ClientAuthPayload: { // field return type
    data: NexusGenRootTypes['Client'] | null; // Client
    token: string; // String!
  }
  Mutation: { // field return type
    addProduct: NexusGenRootTypes['Product']; // Product!
    addToCart: NexusGenRootTypes['CartElement']; // CartElement!
    buyCart: NexusGenRootTypes['Receipt'] | null; // Receipt
    clearCart: NexusGenRootTypes['ReturnMessage'] | null; // ReturnMessage
    removeFromCart: NexusGenRootTypes['CartElement'][] | null; // [CartElement!]
    removeProduct: NexusGenRootTypes['Product']; // Product!
    signIn: NexusGenRootTypes['ClientAuthPayload']; // ClientAuthPayload!
    signInAdmin: NexusGenRootTypes['AdminAuthPayload']; // AdminAuthPayload!
    signup: NexusGenRootTypes['ClientAuthPayload']; // ClientAuthPayload!
    updateCart: NexusGenRootTypes['CartElement']; // CartElement!
    updateProduct: NexusGenRootTypes['Product']; // Product!
  }
  Product: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    id: number; // Int!
    name: string; // String!
    price: number; // Float!
    quantity: number; // Int!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  PurchasesElement: { // field return type
    addedAt: NexusGenScalars['DateTime'] | null; // DateTime
    clientIt: number | null; // Int
    product: NexusGenRootTypes['Product'] | null; // Product
    productId: number | null; // Int
    quantity: number | null; // Int
    total: number; // Int!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Query: { // field return type
    client: NexusGenRootTypes['Client'] | null; // Client
    clientList: NexusGenRootTypes['Client'][]; // [Client!]!
    customerPurchases: NexusGenRootTypes['SalesHistory'][]; // [SalesHistory!]!
    myCart: NexusGenRootTypes['CartElement'][] | null; // [CartElement!]
    product: NexusGenRootTypes['Product'] | null; // Product
    productsList: NexusGenRootTypes['Product'][]; // [Product!]!
    salesHistory: NexusGenRootTypes['SalesHistory'][]; // [SalesHistory!]!
  }
  Receipt: { // field return type
    message: string; // String!
    purchases: NexusGenRootTypes['PurchasesElement'][]; // [PurchasesElement!]!
    total: number; // Float!
    totalDebt: number; // Float!
  }
  ReturnMessage: { // field return type
    message: string; // String!
  }
  SalesHistory: { // field return type
    clientId: number; // Int!
    date: NexusGenScalars['DateTime']; // DateTime!
    product: NexusGenRootTypes['Product'] | null; // Product
    productId: number; // Int!
    quantity: number; // Int!
    total: number; // Float!
  }
}

export interface NexusGenFieldTypeNames {
  AdminAuthPayload: { // field return type name
    token: 'String'
  }
  CartElement: { // field return type name
    addedAt: 'DateTime'
    clientId: 'Int'
    product: 'Product'
    productId: 'Int'
    quantity: 'Int'
    updatedAt: 'DateTime'
  }
  Client: { // field return type name
    createdAt: 'DateTime'
    debt: 'Int'
    email: 'String'
    id: 'Int'
    updatedAt: 'DateTime'
  }
  ClientAuthPayload: { // field return type name
    data: 'Client'
    token: 'String'
  }
  Mutation: { // field return type name
    addProduct: 'Product'
    addToCart: 'CartElement'
    buyCart: 'Receipt'
    clearCart: 'ReturnMessage'
    removeFromCart: 'CartElement'
    removeProduct: 'Product'
    signIn: 'ClientAuthPayload'
    signInAdmin: 'AdminAuthPayload'
    signup: 'ClientAuthPayload'
    updateCart: 'CartElement'
    updateProduct: 'Product'
  }
  Product: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    id: 'Int'
    name: 'String'
    price: 'Float'
    quantity: 'Int'
    updatedAt: 'DateTime'
  }
  PurchasesElement: { // field return type name
    addedAt: 'DateTime'
    clientIt: 'Int'
    product: 'Product'
    productId: 'Int'
    quantity: 'Int'
    total: 'Int'
    updatedAt: 'DateTime'
  }
  Query: { // field return type name
    client: 'Client'
    clientList: 'Client'
    customerPurchases: 'SalesHistory'
    myCart: 'CartElement'
    product: 'Product'
    productsList: 'Product'
    salesHistory: 'SalesHistory'
  }
  Receipt: { // field return type name
    message: 'String'
    purchases: 'PurchasesElement'
    total: 'Float'
    totalDebt: 'Float'
  }
  ReturnMessage: { // field return type name
    message: 'String'
  }
  SalesHistory: { // field return type name
    clientId: 'Int'
    date: 'DateTime'
    product: 'Product'
    productId: 'Int'
    quantity: 'Int'
    total: 'Float'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addProduct: { // args
      description?: string | null; // String
      name: string; // String!
      price: number; // Float!
      quantity: number; // Int!
    }
    addToCart: { // args
      productId: number; // Int!
      quantity: number; // Int!
    }
    removeFromCart: { // args
      productId: number; // Int!
    }
    removeProduct: { // args
      id: number; // Int!
    }
    signIn: { // args
      email: string; // String!
      password: string; // String!
    }
    signInAdmin: { // args
      email: string; // String!
      password: string; // String!
    }
    signup: { // args
      email: string; // String!
      password: string; // String!
    }
    updateCart: { // args
      filter: NexusGenInputs['CartUpdateFilter']; // CartUpdateFilter!
      set: NexusGenInputs['CartUpdateSet']; // CartUpdateSet!
    }
    updateProduct: { // args
      filter: NexusGenInputs['ProductUpdateFilter']; // ProductUpdateFilter!
      set: NexusGenInputs['ProductUpdateSet']; // ProductUpdateSet!
    }
  }
  Query: {
    client: { // args
      id: number; // Int!
    }
    clientList: { // args
      email?: string | null; // String
      orderBy?: NexusGenInputs['ClientOrderByInput'][] | null; // [ClientOrderByInput!]
      skip?: number | null; // Int
      take: number | null; // Int
    }
    customerPurchases: { // args
      clientId: number; // Int!
      orderBy?: NexusGenInputs['SalesHisOrderByInput'][] | null; // [SalesHisOrderByInput!]
      skip?: number | null; // Int
      take: number | null; // Int
    }
    product: { // args
      id: number; // Int!
    }
    productsList: { // args
      name?: string | null; // String
      orderBy?: NexusGenInputs['ProductOrderByInput'][] | null; // [ProductOrderByInput!]
      skip?: number | null; // Int
      take: number | null; // Int
    }
    salesHistory: { // args
      orderBy?: NexusGenInputs['SalesHisOrderByInput'][] | null; // [SalesHisOrderByInput!]
      skip?: number | null; // Int
      take: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}